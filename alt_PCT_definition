import requests
import json
import os
import logging

logging.basicConfig(level=logging.ERROR)
logger = logging.getLogger(__name__)

def fetch_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        logger.error(f"Error during HTTP request: {e}")
        raise

def save_dataset(data, filename='dataset.json'):
    with open(filename, 'w') as file:
        json.dump(data, file, indent=2)  # Use indent for pretty printing

def load_dataset(filename='dataset.json'):
    try:
        with open(filename, 'r') as file:
            return file.read()
    except FileNotFoundError:
        return ""

def get_info_by_pctid(data, target_pctid):
    for entity in data:
        current_pctid = entity.get('PCTID')

        if current_pctid and int(current_pctid) == target_pctid:
            print(f"Information for PCTID {target_pctid}:")
            for key, value in entity.items():
                print(f"{key}: {value}")
            break
    else:
        print(f"No information found for PCTID {target_pctid}")

# Example usage for PCTDefinition
base_url = 'https://data.bionet.nsw.gov.au/biosvcapp/odata/'
entity_set_json = 'VegetationClassification_PCTDefinition'  # Updated to PCTDefinition
metadata_url = f'{base_url}$metadata'

try:
    metadata_response = fetch_data(metadata_url)
    logger.info(f"Metadata response: {metadata_response}")

    current_data_json = fetch_data(f'{base_url}{entity_set_json}')
    logger.info(f"Current data (JSON): {current_data_json}")

    if not current_data_json:
        raise ValueError("Empty or invalid JSON content received.")

    # Load the previously stored dataset
    stored_data_json = load_dataset()

    # Compare current and stored datasets
    if current_data_json != stored_data_json:
        print("JSON Dataset has been updated. Saving the new dataset.")
        save_dataset(current_data_json)
    else:
        print("No changes detected in the JSON dataset.")

    # Prompt the user for the target PCTID
    target_pctid = int(input("Enter the target PCTID: "))

    # Get information for JSON data
    get_info_by_pctid(json.loads(current_data_json).get('value', []), target_pctid)

except requests.RequestException as e:
    print(f"Error during HTTP request: {e}")

except ValueError as ve:
    print(f"Error: {ve}")

except Exception as e:
    print(f"An unexpected error occurred: {e}")
